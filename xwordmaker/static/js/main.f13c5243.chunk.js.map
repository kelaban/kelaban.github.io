{"version":3,"sources":["logo.svg","XGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","width","height","grid","selected","currentWord","clueNumbers","onClick","gridItems","Array","keys","map","i","row","Math","floor","column","val","isSelected","classNames","push","coordinates","some","cn","join","style","fontSize","length","key","className","gridTemplateColumns","gridTemplateRows","DIRECTION_ACROSS","DIRECTION_DOWN","useStyles","makeStyles","theme","root","display","container","paddingLeft","paddingRight","paper","padding","gridPaper","float","scroll","overflow","maxHeight","GridStats","letters","String","fromCharCode","reduce","acc","v","letterCounts","flatMap","r","filter","match","calcWordCount","down","count","len","j","wordLengthsAccross","wordLengthsDown","totalCount","Object","values","JSON","stringify","WordList","useState","words","setWords","filtered","setFiltered","useEffect","fetch","process","then","resp","text","split","l","startsWith","w","query","RegExp","word","List","slice","ListItem","component","target","href","gr","x","Movement","setSelected","this","min","max","direction","right","left","up","TabPanel","props","children","value","index","KeyPressHandler","setCurrentWord","updateGrid","handleKeyPressed","e","movement","moveBack","k","toUpperCase","ctrlKey","moveForward","assign","document","addEventListener","removeEventListener","Fragment","calcNumbers","out","c","num","App","classes","tabValue","handleTabChanged","parse","localStorage","getItem","updateGridState","setClueNumbers","valFor","isEnd","end","start","clsGridPaper","clsx","clsScrollPaper","kphProps","nextGrid","setItem","Container","spacing","item","xs","Paper","Tabs","onChange","nv","Tab","label","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f13c5243.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './XGrid.css';\n\nexport default function Grid({width, height, grid, selected, currentWord, clueNumbers, onClick}) {\n  // go from 0 -> width*height and map to a block in the view\n  const gridItems = [...Array(width*height).keys()]\n      .map(i => {\n        const row = Math.floor(i/width)\n        const column = Math.floor(i%width)\n        const val = grid[row][column]\n        const isSelected = selected && selected.row === row && selected.column === column\n        let classNames = [\"Grid-item\"]\n        if (val === \"!\") {\n          classNames.push(\"Grid-item-blocked\")\n        }\n        if (isSelected) {\n          classNames.push(\"Grid-item-selected\")\n        } else if (currentWord.coordinates.some(i => i[0] === row && i[1] === column)) {\n          classNames.push(\"Grid-item-highlight\")\n        }\n        const cn = classNames.join(\" \")\n        const style = {\n          fontSize: `${(1/(val.length))*1.1}em`\n        }\n\n        return (\n          <div key={i} className={cn} onClick={() => onClick({row, column})}>\n            <span className=\"Grid-number\">{clueNumbers[row][column]}</span>\n            <span style={style}>{val}</span>\n          </div>\n        )\n      })\n\n  return (\n    <div\n      style={{\n        gridTemplateColumns: `repeat(${width}, 1fr)`,\n        gridTemplateRows: `repeat(${width}, 1fr)`\n      }}\n      className=\"Grid-container\"\n    >\n      {gridItems}\n    </div>\n  )\n}\n","import React, { Component, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport logo from './logo.svg';\nimport './App.css';\nimport XGrid from './XGrid'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\n\nconst DIRECTION_ACROSS = \"ACROSS\"\nconst DIRECTION_DOWN = \"DOWN\"\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12,\n  },\n  paper: {\n    padding: 10,\n  },\n  gridPaper: {\n    width: \"75vmin\",\n    height: \"75vmin\",\n    //clear the width\n    float: \"left\"\n  },\n  scroll: {\n    overflow: \"scroll\",\n    maxHeight: \"calc(100vh - 100px)\",\n  }\n}));\n\nconst GridStats = ({grid}) => {\n  // get {A: 0 ... Z:0)\n  const letters = [...Array(26).keys()].map(i => String.fromCharCode(i + 65)).reduce((acc, v) => ((acc[v] = 0) || acc), {})\n  // add counts of single letters\n  const letterCounts = grid.flatMap(r => r.map(v => v)).filter(v => v.match(/^[A-Z]$/)).reduce((acc, v) => ((acc[v] = (acc[v] || 0) + 1) && acc), letters)\n\n  const calcWordCount = (down) => {\n    const count = {}\n    for (let i=0; i<=grid.length-1; ++i) {\n      let len = 0\n      for (let j=0; j<=grid[0].length-1; ++j) {\n        let v = down ?  grid[j][i] : grid[i][j]\n        if(v !== \"!\") {\n          len += 1\n        } else {\n          if (len > 0) {\n            count[len] = (count[len] || 0) + 1\n          }\n          len = 0\n        }\n      }\n      if (len > 0) {\n        count[len] = (count[len] || 0) + 1\n      }\n    }\n\n    return count\n  }\n\n  const wordLengthsAccross = calcWordCount()\n  const wordLengthsDown = calcWordCount(true)\n  const totalCount = Object.values(wordLengthsAccross).reduce((acc, v) => acc+v, 0) +\n                      Object.values(wordLengthsDown).reduce((acc, v) => acc+v, 0)\n\n  return (\n    <div>\n      {JSON.stringify(letterCounts)}\n      <br/>\n      Across\n      <br/>\n      {JSON.stringify(wordLengthsAccross)}\n      <br/>\n      Down\n      <br/>\n      {JSON.stringify(wordLengthsDown)}\n      <br/>\n      Total: {totalCount}\n    </div>\n  )\n}\n\n\nconst WordList = ({currentWord}) => {\n  const [words, setWords] = useState([])\n  const [filtered, setFiltered] = useState([])\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/wordlist/wordlist.txt`)\n      .then(resp => resp.text())\n      .then(text =>\n          text.split(\"\\n\")\n            .filter(l => !l.startsWith(\"#\")))\n      .then(w => setWords(w))\n  }, [])\n\n  useEffect(() => {\n    const query = new RegExp(\"^\"+currentWord.word+\"$\", \"i\")\n    setFiltered(words.filter(w => w.match(query)))\n  }, [currentWord.word])\n\n  const max = 200\n\n  return <div>\n    Words: {filtered.length > max ? `showing ${max}/` : ''}{filtered.length}\n    <List>\n      {filtered.slice(0,200).map(w =>\n          <ListItem\n            key={w}\n            component=\"a\"\n            target=\"_blank\"\n            href={`https://www.anagrammer.com/crossword-clues/${w}`}>\n            {w}\n          </ListItem>\n       )}\n    </List>\n  </div>\n}\n\nconst w = 15\nconst h = 15\nconst gr = JSON.stringify([...Array(w).keys()].map(r => [...Array(h).keys()].map(x => \"\")))\n\n\nclass Movement {\n  constructor({selected, width, height, currentWord, setSelected}) {\n    this.selected = selected\n    this.width = width\n    this.height = height\n    this.setSelected = setSelected\n    this.currentWord = currentWord\n  }\n\n  right() {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.min(this.width-1, this.selected.column+1)\n    })\n  }\n\n  left() {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.max(0, this.selected.column-1)\n    })\n  }\n  up() {\n    this.setSelected({\n      row: Math.max(0, this.selected.row-1),\n      column: this.selected.column\n    })\n  }\n\n  down() {\n    this.setSelected({\n      row: Math.min(this.height-1, this.selected.row+1),\n      column: this.selected.column\n    })\n  }\n\n  moveForward() {\n    if (this.currentWord.direction === DIRECTION_ACROSS) {\n      this.right()\n    } else {\n      this.down()\n    }\n  }\n  moveBack() {\n    if (this.currentWord.direction === DIRECTION_ACROSS) {\n      this.left()\n    } else {\n      this.up()\n    }\n  }\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  let style = {}\n  if (value !== index) {\n    style['display'] = \"none\"\n  }\n\n  return <div style={style}>\n    {children}\n  </div>\n}\n\n\nfunction KeyPressHandler(props) {\n  const {\n    width,\n    height,\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid\n  } = props\n\n  const handleKeyPressed = (e) => {\n    if (selected) {\n      const movement = new Movement({width, height, setSelected, currentWord, selected})\n\n      if (e.key === \"Backspace\") {\n        const old = grid[selected.row][selected.column]\n        if (old === '!') {\n          grid[height - selected.row - 1][width - selected.column - 1] = ''\n        }\n        grid[selected.row][selected.column] = \"\"\n\n        movement.moveBack()\n        updateGrid([...grid])\n\n      } else if(e.key.match(/^[a-z]$/i)) {\n        let k = e.key.toUpperCase()\n        if (e.ctrlKey) {\n          grid[selected.row][selected.column] += k\n        } else {\n          grid[selected.row][selected.column] = k\n          movement.moveForward()\n        }\n        updateGrid([...grid])\n      } else if(e.key === '!') {\n        grid[selected.row][selected.column] = e.key\n        grid[height - selected.row - 1][width - selected.column - 1] = e.key\n        movement.moveForward()\n        updateGrid([...grid])\n      } else if (e.key === ' ') {\n        setCurrentWord(Object.assign({}, currentWord, {\n          direction: currentWord.direction === DIRECTION_ACROSS ? DIRECTION_DOWN : DIRECTION_ACROSS\n        }))\n      } else if(e.key == 'ArrowRight') {\n        movement.right()\n      } else if(e.key == 'ArrowLeft') {\n        movement.left()\n      } else if(e.key == 'ArrowUp') {\n        movement.up()\n      } else if(e.key == 'ArrowDown') {\n        movement.down()\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPressed)\n    return () => {\n      document.removeEventListener('keydown', handleKeyPressed)\n    }\n  })\n\n  return <React.Fragment></React.Fragment>\n}\n\nfunction calcNumbers(grid) {\n  let out = grid.map(r => r.map(c => \"\")); // clone grid\n  let num = 1;\n  for (let i=0; i<grid.length; ++i){\n    for (let j=0; j<grid[i].length; ++j) {\n      if (grid[i][j] === \"!\") continue;\n\n      if((i === 0 || grid[i-1][j] === \"!\") && (i !== grid.length || grid[i+1][j] !== '!')) {\n        out[i][j] = num++;\n      } else if((j === 0 || grid[i][j-1] === \"!\") && (j !== grid[i].length || grid[i][j+1] === '!')) {\n        out[i][j] = num++;\n      }\n    }\n  }\n\n  return out;\n}\n\nfunction App() {\n  const classes = useStyles()\n  const [tabValue, handleTabChanged] = useState(0)\n  const [selected, setSelected] = useState()\n  const [currentWord, setCurrentWord] = useState({word: \"\", direction: DIRECTION_ACROSS, coordinates: []})\n  const [grid, updateGridState] = useState(JSON.parse(localStorage.getItem(\"grid\") || gr))\n  const [clueNumbers, setClueNumbers] = useState(calcNumbers(grid));\n\n\n  const width = grid[0].length\n  const height = grid.length\n\n  const updateGrid = (nextGrid) => {\n    localStorage.setItem(\"grid\", JSON.stringify(nextGrid))\n    updateGridState(nextGrid)\n  }\n\n  useEffect(() => setClueNumbers(calcNumbers(grid)), [grid])\n\n  useEffect(() => {\n    if (selected) {\n      const valFor = (x) => currentWord.direction === DIRECTION_ACROSS ? grid[selected.row][x] :grid[x][selected.column]\n      const coordinatesFor = (x) => currentWord.direction === DIRECTION_ACROSS ? [selected.row, x] : [x, selected.column]\n      const isEnd = (end) => currentWord.direction === DIRECTION_ACROSS ? end < width : end < height\n\n      let start = currentWord.direction === DIRECTION_ACROSS ? selected.column : selected.row;\n      let end = start\n\n      // Find beginning\n      // Then find end of the word\n      // When convert those values into an string and convert blanks to . for word search\n      // also compile list of coordinates for grid highlighting\n      //  finally set the new state\n      while(start>0 && valFor(start) !== \"!\") start--;\n      while(isEnd(end) && valFor(end) !== \"!\") end++;\n      if (valFor(start) === \"!\") start++;\n\n      let word = \"\"\n      let coordinates = []\n\n      for(let i=start; i<end; ++i) {\n        let v = valFor(i)\n        if (v === \"\") v = \".\";\n        word += v\n        coordinates.push(coordinatesFor(i))\n      }\n\n      setCurrentWord(Object.assign({}, currentWord, {\n        word,\n        coordinates\n      }))\n\n    }\n  }, [selected, currentWord.direction])\n\n\n  const clsGridPaper = clsx(classes.paper, classes.gridPaper)\n  const clsScrollPaper = clsx(classes.paper, classes.scroll)\n\n  const kphProps = {\n    width,\n    height,\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid\n  }\n\n  return (\n    <div className=\"App\">\n      <KeyPressHandler {...kphProps} />\n      <Container className={classes.container}>\n        <Grid container spacing={0}>\n          <Grid item xs>\n            <Paper className={clsGridPaper} >\n              <XGrid width={width} height={height} grid={grid} selected={selected} currentWord={currentWord} onClick={setSelected} clueNumbers={clueNumbers}/>\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Tabs value={tabValue} onChange={(e,nv) => handleTabChanged(nv)}>\n              <Tab label=\"Word List\"/>\n              <Tab label=\"Grid Stats\"/>\n            </Tabs>\n            <TabPanel value={tabValue} index={0}>\n            <Paper className={clsScrollPaper} >\n              <WordList currentWord={currentWord}/>\n            </Paper>\n            </TabPanel>\n            <TabPanel value={tabValue} index={1}>\n              <Paper className={clsScrollPaper} >\n                <GridStats grid={grid} />\n              </Paper>\n            </TabPanel>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}