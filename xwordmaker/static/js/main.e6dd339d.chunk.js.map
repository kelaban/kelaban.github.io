{"version":3,"sources":["constants.js","XGrid.js","NewPuzzleForm.js","helpers.js","KeyPressHandler.js","Clues.js","App.js","serviceWorker.js","index.js"],"names":["DIRECTION_ACROSS","DIRECTION_DOWN","isDirectionAcross","v","BLOCKED_SQUARE","isBlockedSquare","Grid","grid","selected","currentWord","onClick","size","rows","cols","gridItems","Array","keys","map","i","row","Math","floor","column","val","isSelected","classNames","push","coordinates","some","cn","join","style","fontSize","length","key","className","gridnums","gridTemplateColumns","gridTemplateRows","useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","NewPuzzleForm","onSave","classes","React","useState","open","setOpen","values","setValues","handleClose","save","handleChange","dir","event","Object","assign","target","value","Button","aria-label","color","startIcon","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","label","onChange","type","InputLabelProps","shrink","margin","variant","inputProps","min","max","DialogActions","coord2dTo1d","col","valFrom2d","Movement","width","height","setSelected","this","direction","right","down","left","up","KeyPressHandler","props","setCurrentWord","updateGrid","hasFocus","handleKeyPressed","e","movement","old","moveBack","match","k","toUpperCase","ctrlKey","moveForward","useEffect","document","addEventListener","removeEventListener","Fragment","memo","onClueFocus","onClueChanged","handleFocus","clueNum","handleUpdateWord","word","mapClues","d","toLowerCase","clues","clue","input","answers","trim","clueText","replace","DOMParser","parseFromString","documentElement","textContent","disabled","error","defaultValue","fullWidth","onBlur","across","container","item","xs","Typography","root","display","title","flexGrow","paddingLeft","paddingRight","paddingTop","paper","outline","padding","gridPaper","float","scroll","overflow","maxHeight","WORDLIST","WordList","words","setWordsState","filtered","setFiltered","fetch","process","then","resp","text","split","filter","l","startsWith","w","setWords","query","RegExp","List","dense","slice","ListItem","button","TabPanel","children","index","calcNumbersAndAnswers","wordToClue","out","r","num","j","isNewDown","isNewAcross","start","makePuzzle","g","author","editor","copyright","publisher","date","circles","parseWordToClue","newWordToClue","parse","reduce","acc","ww","initialGridState","JSON","localStorage","getItem","currentWordInitialState","App","tabValue","handleTabChanged","motionState","setMotionState","gridState","updateAllGridState","gridFocus","setGridFocus","updateGridState","nextGrid","extraState","prevState","nextState","useCallback","setItem","stringify","nextCw","valFor","x","isNotEnd","end","calcCurrentWord","nextSelected","nextCurrentWord","handleClueFocus","handleClueChanged","updateWordToClue","handleWordListClicked","forEach","coord","clsGridPaper","clsx","clsScrollPaper","kphProps","AppBar","position","Toolbar","blob","Blob","saveAs","component","reader","FileReader","onload","result","newGrid","readAsText","files","Container","Paper","onFocus","tabindex","Tabs","nv","Tab","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6dd339d.chunk.js","sourcesContent":["\nexport const DIRECTION_ACROSS = \"ACROSS\"\nexport const DIRECTION_DOWN = \"DOWN\"\nexport const isDirectionAcross = (v) => v === DIRECTION_ACROSS\n\n\nexport const BLOCKED_SQUARE = '.'\nexport const isBlockedSquare = (v) => v === BLOCKED_SQUARE\n","import React from 'react';\nimport './XGrid.css';\nimport { isBlockedSquare }  from './constants';\n\nexport default function Grid({grid, selected, currentWord, onClick}) {\n  const {rows, cols} = grid.size\n  // go from 0 -> width*height and map to a block in the view\n  const gridItems = [...Array(rows*cols).keys()]\n      .map(i => {\n        const row = Math.floor(i / cols)\n        const column = Math.floor(i % cols)\n        const val = grid.grid[i]\n        const isSelected = selected && selected.row === row && selected.column === column\n        let classNames = [\"Grid-item\"]\n        if (isBlockedSquare(val)) {\n          classNames.push(\"Grid-item-blocked\")\n        }\n        if (isSelected) {\n          classNames.push(\"Grid-item-selected\")\n        } else if (currentWord.coordinates.some(i => i[0] === row && i[1] === column)) {\n          classNames.push(\"Grid-item-highlight\")\n        }\n        const cn = classNames.join(\" \")\n        const style = {\n          fontSize: `${(1/(val.length))*1.1}em`\n        }\n\n        return (\n          <div key={i} className={cn} onClick={() => onClick({row, column})}>\n            <span className=\"Grid-number\">{grid.gridnums[i] > 0 ? grid.gridnums[i] : ''}</span>\n            <span style={style}>{val}</span>\n          </div>\n        )\n      })\n\n  return (\n    <div\n      style={{\n        gridTemplateColumns: `repeat(${cols}, 1fr)`,\n        gridTemplateRows: `repeat(${rows}, 1fr)`,\n      }}\n      className=\"Grid-container\"\n    >\n      {gridItems}\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n}));\n\nexport default function NewPuzzleForm({onSave}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [values, setValues] = React.useState({rows: 15, cols: 15})\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (save) => () => {\n    setOpen(false);\n\n    if(save) {\n      onSave(values)\n    }\n\n  };\n\n  const handleChange = (dir) => (event) => {\n    setValues(Object.assign({}, values, {[dir]: +event.target.value || ''}))\n  }\n\n  return (\n    <div>\n        <Button\n          aria-label=\"New puzzle\"\n          color=\"inherit\"\n          startIcon={<AddIcon />}\n          onClick={handleClickOpen}\n        >\n          New Puzzle\n        </Button>\n      <Dialog open={open} onClose={handleClose(false)}>\n        <DialogTitle>Create New Puzzle</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new puzzle. Warning! This will destroy the current puzzle. Make sure to save first!\n          </DialogContentText>\n          <TextField\n            label=\"Rows\"\n            value={values.rows}\n            onChange={handleChange('rows')}\n            className={classes.textField}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n            variant=\"outlined\"\n            inputProps={{\n              min: 1,\n              max: 100\n            }}\n          />\n          <TextField\n            label=\"Columns\"\n            value={values.cols}\n            onChange={handleChange('cols')}\n            className={classes.textField}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n            variant=\"outlined\"\n            inputProps={{\n              min: 1,\n              max: 100\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose(true)} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","\nexport const coord2dTo1d = (grid, row, col) => (grid.size.cols*row)+col\nexport const valFrom2d = (grid, row, col) => grid.grid[coord2dTo1d(grid, row, col)]\n","import React, { Component, useEffect } from 'react';\n\nimport {\n  isDirectionAcross,\n  isBlockedSquare,\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n  BLOCKED_SQUARE\n}  from './constants';\n\nimport {\ncoord2dTo1d,\nvalFrom2d\n} from './helpers';\n\nclass Movement {\n  constructor({selected, width, height, currentWord, setSelected}) {\n    this.selected = selected\n    this.width = width\n    this.height = height\n    this.setSelected = setSelected\n    this.currentWord = currentWord\n  }\n\n  right() {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.min(this.width-1, this.selected.column+1)\n    })\n  }\n\n  left() {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.max(0, this.selected.column-1)\n    })\n  }\n  up() {\n    this.setSelected({\n      row: Math.max(0, this.selected.row-1),\n      column: this.selected.column\n    })\n  }\n\n  down() {\n    this.setSelected({\n      row: Math.min(this.height-1, this.selected.row+1),\n      column: this.selected.column\n    })\n  }\n\n  moveForward() {\n    if (isDirectionAcross(this.currentWord.direction)) {\n      this.right()\n    } else {\n      this.down()\n    }\n  }\n  moveBack() {\n    if (isDirectionAcross(this.currentWord.direction)) {\n      this.left()\n    } else {\n      this.up()\n    }\n  }\n}\n\nexport default function KeyPressHandler(props) {\n  const {\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid,\n    hasFocus\n  } = props\n\n  const {rows: height, cols: width} = grid.size\n\n  const handleKeyPressed = (e) => {\n    if (!hasFocus) {\n      return\n    }\n\n    if (selected) {\n      const movement = new Movement({width, height, setSelected, currentWord, selected})\n\n      if (e.key === \"Backspace\") {\n        const old = valFrom2d(grid, selected.row, selected.column)\n        if (isBlockedSquare(old)) {\n          grid.grid[coord2dTo1d(grid, height - selected.row - 1, width - selected.column - 1)] = \"\"\n        }\n        grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = \"\"\n\n        movement.moveBack()\n        updateGrid(grid)\n      } else if(e.key.match(/^[a-z0-9]$/i)) {\n        let k = e.key.toUpperCase()\n        if (e.ctrlKey) {\n          grid.grid[coord2dTo1d(grid, selected.row, selected.column)] += k\n        } else {\n          grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = k\n          movement.moveForward()\n        }\n        updateGrid(grid)\n      } else if(e.key === BLOCKED_SQUARE) {\n        grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = e.key\n        grid.grid[coord2dTo1d(grid, height - selected.row - 1, width - selected.column - 1)] = e.key\n        movement.moveForward()\n        updateGrid(grid)\n      } else if (e.key === ' ') {\n        setCurrentWord(Object.assign({}, currentWord, {\n          direction: currentWord.direction === DIRECTION_ACROSS ? DIRECTION_DOWN : DIRECTION_ACROSS\n        }))\n      } else if(e.key == 'ArrowRight') {\n        movement.right()\n      } else if(e.key == 'ArrowLeft') {\n        movement.left()\n      } else if(e.key == 'ArrowUp') {\n        movement.up()\n      } else if(e.key == 'ArrowDown') {\n        movement.down()\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPressed)\n    return () => {\n      document.removeEventListener('keydown', handleKeyPressed)\n    }\n  })\n\n  return <React.Fragment/>\n}\n","import React, { memo } from 'react';\n\nimport {\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n}  from './constants';\n\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nfunction decode(input)\n{\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\n  return doc.documentElement.textContent;\n}\n\nexport default memo(function Clues({grid, onClueFocus, onClueChanged}) {\n    const handleFocus = (dir, clueNum) => (e) => {\n      onClueFocus(dir, clueNum)\n    }\n\n    const handleUpdateWord = (dir, word) => e => {\n      onClueChanged(dir, word, e.target.value)\n    }\n\n    const mapClues = (dir) => {\n      const d = dir.toLowerCase()\n      return grid.clues[d].map((clue, i) => {\n        const word = grid.answers[d][i]\n        const clueNum = +clue.match(/^ *[0-9]+/)[0].trim()\n        const clueText = decode(clue.replace(/^ *[0-9]*\\. */, ''))\n        const disabled = word.match(\"_\")\n        const error = !disabled && !clueText.length\n        return (\n            <TextField\n              key={`${clueNum}-${word}`}\n              label={`${clueNum}: ${word}`}\n              defaultValue={clueText}\n              type=\"text\"\n              margin=\"dense\"\n              variant=\"outlined\"\n              fullWidth\n              onClick={handleFocus(dir, clueNum)}\n              onBlur={handleUpdateWord(dir, word)}\n              disabled={disabled}\n              error={error}\n            />\n        )\n      })\n    }\n\n    const across = mapClues(DIRECTION_ACROSS)\n    const down = mapClues(DIRECTION_DOWN)\n    return (\n      <div>\n        <Grid container spacing={1}>\n          <Grid item xs>\n            <Typography>Across</Typography>\n              {across}\n          </Grid>\n          <Grid item xs>\n            <Typography>Down</Typography>\n              {down}\n          </Grid>\n        </Grid>\n      </div>\n    )\n  })\n","import React, { memo, useState, useEffect, useCallback } from 'react';\nimport clsx from 'clsx';\nimport './App.css';\nimport XGrid from './XGrid'\nimport NewPuzzleForm from './NewPuzzleForm'\nimport KeyPressHandler from './KeyPressHandler'\nimport Clues from './Clues'\nimport {\n  isDirectionAcross,\n  isBlockedSquare,\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n}  from './constants';\nimport { coord2dTo1d, valFrom2d } from './helpers';\n\nimport { saveAs } from 'file-saver';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12,\n    paddingTop: 32,\n  },\n  paper: {\n    \"&:focus\": {\n      outline: 0,\n    },\n    padding: 10,\n  },\n  gridPaper: {\n    width: \"75vmin\",\n    height: \"75vmin\",\n    //clear the width\n    float: \"left\"\n  },\n  scroll: {\n    overflow: \"scroll\",\n    maxHeight: \"calc(100vh - 180px)\",\n  }\n}));\n\nconst GridStats = ({grid}) => {\n  return null\n  // get {A: 0 ... Z:0)\n  const letters = [...Array(26).keys()].map(i => String.fromCharCode(i + 65)).reduce((acc, v) => ((acc[v] = 0) || acc), {})\n  // add counts of single letters\n  const letterCounts = grid.grid.map(v => v).filter(v => v && v.match(/^[A-Z]$/)).reduce((acc, v) => ((acc[v] = (acc[v] || 0) + 1) && acc), letters)\n\n  const calcWordCount = (down) => {\n    const count = {}\n    for (let i=0; i<=grid.size.rows; ++i) {\n      let len = 0\n      for (let j=0; j<=grid.size.cols; ++j) {\n        let v = down ?  valFrom2d(grid, j, i) : valFrom2d(grid, i, j)\n        if(isBlockedSquare(v)) {\n          len += 1\n        } else {\n          if (len > 0) {\n            count[len] = (count[len] || 0) + 1\n          }\n          len = 0\n        }\n      }\n      if (len > 0) {\n        count[len] = (count[len] || 0) + 1\n      }\n    }\n\n    return count\n  }\n\n  const wordLengthsAccross = calcWordCount()\n  const wordLengthsDown = calcWordCount(true)\n  const totalCount = Object.values(wordLengthsAccross).reduce((acc, v) => acc+v, 0) +\n                      Object.values(wordLengthsDown).reduce((acc, v) => acc+v, 0)\n\n  return (\n    <div>\n      {JSON.stringify(letterCounts)}\n      <br/>\n      Across\n      <br/>\n      {JSON.stringify(wordLengthsAccross)}\n      <br/>\n      Down\n      <br/>\n      {JSON.stringify(wordLengthsDown)}\n      <br/>\n      Total: {totalCount}\n    </div>\n  )\n}\n\n\nlet WORDLIST = null\n\nconst WordList = memo(({currentWord, onClick}) => {\n  const [words, setWordsState] = useState(WORDLIST || [])\n  const [filtered, setFiltered] = useState([])\n\n  const setWords = (words) => {\n    //cache wordlist incase component unmounts\n    WORDLIST = words\n    setWordsState(words)\n  }\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/wordlist/wordlist.txt`)\n      .then(resp => resp.text())\n      .then(text =>\n          text.split(\"\\n\")\n            .filter(l => !l.startsWith(\"#\")))\n      .then(w => setWords(w))\n  }, [])\n\n  useEffect(() => {\n    const query = new RegExp(\"^\"+currentWord.word+\"$\", \"i\")\n    setFiltered(words.filter(w => w.match(query)))\n  }, [words, currentWord.word])\n\n  const max = 100\n\n  /*\n          <ListItem\n            key={w}\n            component=\"a\"\n            target=\"_blank\"\n            href={`https://www.anagrammer.com/crossword-clues/${w}`}>\n            */\n\n  return <div>\n    Words: {filtered.length > max ? `showing ${max}/` : ''}{filtered.length}\n    <List dense>\n      {filtered.slice(0,max).map(w =>\n          <ListItem\n            button\n            onClick={() => onClick(w)}\n            key={w}>\n            {w}\n          </ListItem>\n       )}\n    </List>\n  </div>\n})\n\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  let style = {}\n  let hidden = value !== index\n\n  if (hidden) {\n    return <div></div>\n  }\n\n  return <div>\n    {children}\n  </div>\n}\n\n\nfunction calcNumbersAndAnswers(grid, wordToClue) {\n  const {rows, cols} = grid.size\n  let out = {\n    gridnums: grid.grid.map(r => 0), // clone grid\n    answers: {down: [], across: []},\n    clues: {down: [], across: []}\n  }\n\n  let num = 1;\n  for (let i=0; i<rows; ++i){\n    for (let j=0; j<cols; ++j) {\n      if (isBlockedSquare(valFrom2d(grid, i, j))) continue;\n\n      const isNewDown = (i === 0 || isBlockedSquare(valFrom2d(grid,i-1,j))) && !(i === rows || isBlockedSquare(valFrom2d(grid,i+1,j)))\n      const isNewAcross = (j === 0 || isBlockedSquare(valFrom2d(grid,i,j-1))) && !(j === cols || isBlockedSquare(valFrom2d(grid,i,j+1)))\n      if(isNewAcross || isNewDown) {\n        out.gridnums[coord2dTo1d(grid, i, j)] = num++;\n      }\n\n      if(isNewAcross) {\n        let currentWord = \"\"\n        let start = j;\n        while(!isBlockedSquare(valFrom2d(grid,i,start)) && start < cols) {\n          let w = valFrom2d(grid, i, start)\n          currentWord += w ? w : '_'\n          start++\n        }\n        out.answers.across.push(currentWord)\n        let clue = wordToClue[currentWord] || ''\n        out.clues.across.push(`${num-1}. ${clue}`)\n      }\n\n      if(isNewDown) {\n        let currentWord = \"\"\n        let start = i;\n        while(!isBlockedSquare(valFrom2d(grid,start,j)) && start < rows) {\n          let w = valFrom2d(grid, start, j)\n          currentWord += w ? w : '_'\n          start++\n        }\n        out.answers.down.push(currentWord)\n        let clue = wordToClue[currentWord] || ''\n        out.clues.down.push(`${num-1}. ${clue}`)\n      }\n\n    }\n  }\n\n  return out;\n}\n\nfunction calcCurrentWord({direction, grid, selected}) {\n    if (!selected) { return null }\n\n    const valFor = (x) => isDirectionAcross(direction) ? valFrom2d(grid, selected.row, x) : valFrom2d(grid, x, selected.column)\n    const coordinatesFor = (x) => isDirectionAcross(direction) ? [selected.row, x] : [x, selected.column]\n    const isNotEnd = (end) => isDirectionAcross(direction) ? end < grid.size.cols : end < grid.size.rows\n\n    let start = isDirectionAcross(direction) ? selected.column : selected.row;\n    let end = start\n\n    // Find beginning\n    // Then find end of the word\n    // When convert those values into an string and convert blanks to . for word search\n    // also compile list of coordinates for grid highlighting\n    //  finally set the new state\n    while(start>0 && !isBlockedSquare(valFor(start))) start--;\n    while(isNotEnd(end) && !isBlockedSquare(valFor(end))) end++;\n    if (isBlockedSquare(valFor(start))) start++;\n\n    let word = \"\"\n    let coordinates = []\n\n    for(let i=start; i<end; ++i) {\n      let v = valFor(i)\n      if (v === \"\") v = \".\";\n      word += v\n      coordinates.push(coordinatesFor(i))\n    }\n\n    return { word, coordinates }\n}\n\n// Format specified by https://www.xwordinfo.com/JSON/\nconst makePuzzle = (size) => {\n  let g = {\n    title: \"TODO: NY Times, Thu, Sep 11, 2008\",\n    author: \"TODO: Caleb Madison\",\n    editor: \"TODO: Will Shortz\",\n    copyright: \"TODO: 2008, The New York Times\",\n    publisher: \"TODO: The New York Times\",\n    date: \"TODO: 9/11/2008\",\n    size,\n    // clues should include number as well e.g. \"1. Waxed\"\n    clues: {\n      across: [],\n      down: []\n    }\n  }\n  return Object.assign(g, {\n    // '.' means black, multiple letters valid for rebus\n    grid: [...Array(g.size.rows*g.size.cols).keys()].map(v => \"\"),\n    // 0 means no number\n    gridnums: [...Array(g.size.rows*g.size.cols).keys()].map(v => 0),\n    // TODO: 0 means circle 1 means circle\n    circles: [...Array(g.size.rows*g.size.cols).keys()].map(v => 0),\n  })\n}\n\nfunction parseWordToClue(grid) {\n  const newWordToClue = {}\n  if (grid.answers) {\n    const parse = dir => {\n      grid.answers[dir]\n      .filter(w => !w.match('_'))\n      .reduce((acc, w, i) => {\n        let ww = (grid.clues[dir][i] || '').replace(/^ *[0-9]*\\. */, '')\n        acc[w] = ww\n        return acc\n      }, newWordToClue)\n    }\n\n    parse('down')\n    parse('across')\n  }\n\n  return newWordToClue\n}\n\nconst initialGridState = function intialGridState() {\n    const grid = JSON.parse(localStorage.getItem(\"grid\")) || makePuzzle({rows: 15, cols: 15})\n    const wordToClue = parseWordToClue(grid)\n\n    return {grid, wordToClue}\n}()\n\nconst currentWordInitialState = {word: \"\", direction: DIRECTION_ACROSS, coordinates: []}\n\n\nfunction App() {\n  const classes = useStyles()\n  const [tabValue, handleTabChanged] = useState(0)\n  const [motionState, setMotionState] = useState({selected: null, currentWord: currentWordInitialState})\n  const [gridState, updateAllGridState] = useState(initialGridState)\n  const {wordToClue, grid} = gridState\n\n  const [gridFocus, setGridFocus] = useState(false)\n\n  const {selected, currentWord} = motionState\n\n  const updateGridState = (nextGrid, extraState) => {\n    extraState = extraState || {}\n    updateAllGridState((prevState) => {\n      let nextState = {\n        ...prevState,\n        ...extraState,\n        grid: nextGrid\n      }\n      nextState.grid = {...nextState.grid, ...calcNumbersAndAnswers(nextState.grid, nextState.wordToClue)}\n      return nextState\n    })\n  }\n\n  const updateWordToClue = (word, clue) => {\n    updateAllGridState((prevState) => {\n      let nextState = {\n        ...prevState,\n        wordToClue: {\n          ...prevState.wordToClue,\n          [word]: clue\n        }\n      }\n      nextState.grid = {...nextState.grid, ...calcNumbersAndAnswers(nextState.grid, nextState.wordToClue)}\n      return nextState\n    })\n  }\n\n  const setCurrentWord = useCallback((currentWord) => {\n    setMotionState((prevState) => ({\n      ...prevState,\n      currentWord: {\n        ...prevState.currentWord,\n        ...currentWord\n      }\n    }))\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"grid\", JSON.stringify(grid))\n  },\n    [grid, wordToClue]\n  )\n\n  useEffect(() => {\n    const nextCw = calcCurrentWord({selected, direction: currentWord.direction, grid})\n    nextCw && setCurrentWord(nextCw)\n  }, [setCurrentWord, selected, grid, currentWord.direction])\n\n\n  const setSelected = (nextSelected) => {\n    let nextCurrentWord = motionState.currentWord\n\n    if(nextSelected && selected && nextSelected.row === selected.row && nextSelected.column === selected.column) {\n      nextCurrentWord = {\n        ...nextCurrentWord,\n        direction: currentWord.direction === DIRECTION_ACROSS ? DIRECTION_DOWN : DIRECTION_ACROSS\n      }\n    }\n\n    setMotionState({\n      ...motionState,\n      selected: nextSelected,\n      currentWord: nextCurrentWord\n    })\n  }\n\n  const handleClueFocus = useCallback((direction, clueNum) => {\n    let selected = {}\n    for(let i=0; i<grid.gridnums.length; ++i) {\n      if(grid.gridnums[i] == clueNum) {\n        const row = Math.floor(i / grid.size.cols)\n        const column = Math.floor(i % grid.size.cols)\n        selected = {\n          row, column\n        }\n        break;\n      }\n    }\n\n    setMotionState((prevState) => ({\n      ...prevState,\n      currentWord: {\n        ...currentWordInitialState,\n        direction,\n      },\n      selected,\n    }))\n  }, [grid])\n\n  const handleClueChanged = useCallback((direction, word, clue) => {\n    updateWordToClue(word, clue)\n  }, [])\n\n  const handleSavePuzzle = () => {\n    var blob = new Blob([JSON.stringify(grid)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"puzzle.json\")\n  }\n\n  // TODO handle failure and validate puzzle format\n  const handleImportPuzzle = (e) => {\n    let input = e.target;\n\n    let reader = new FileReader();\n    reader.onload = function(){\n      let text = reader.result;\n      const newGrid = JSON.parse(text)\n      updateGridState(newGrid, {\n        wordToClue: parseWordToClue(newGrid)\n      })\n    };\n\n    reader.readAsText(input.files[0]);\n  }\n\n  const handleCreateNewPuzzle = (size) => {\n    updateGridState(makePuzzle(size))\n    setSelected()\n  }\n\n  const handleFocus = hasFocus => e => {\n    setGridFocus(hasFocus)\n  }\n\n  const handleWordListClicked = useCallback(word => {\n    currentWord.coordinates.forEach((coord, i) => {\n      grid.grid[coord2dTo1d(grid, coord[0], coord[1])] = word[i]\n    })\n    updateGridState(grid)\n  }, [grid, currentWord])\n\n\n  const clsGridPaper = clsx(classes.paper, classes.gridPaper)\n  const clsScrollPaper = clsx(classes.paper, classes.scroll)\n\n  const kphProps = {\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid: updateGridState,\n    hasFocus: gridFocus\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n       <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          XWordMaker\n        </Typography>\n        <Button\n          aria-label=\"Save puzzle\"\n          color=\"inherit\"\n          startIcon={<SaveAlt />}\n          onClick={handleSavePuzzle}\n        >\n          Save Puzzle\n        </Button>\n        <Button\n          aria-label=\"Load puzzle\"\n          color=\"inherit\"\n          component=\"label\"\n          startIcon={<ArrowUpwardIcon />}\n        >\n          Load Puzzle\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            onChange={handleImportPuzzle}\n            />\n        </Button>\n        <NewPuzzleForm onSave={handleCreateNewPuzzle}/>\n       </Toolbar>\n      </AppBar>\n      <KeyPressHandler {...kphProps} />\n      <Container className={classes.container}>\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <Paper className={clsGridPaper} onFocus={handleFocus(true)} onBlur={handleFocus(false)} tabindex=\"0\">\n              <XGrid grid={grid} selected={motionState.selected} currentWord={motionState.currentWord} onClick={setSelected} />\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Tabs value={tabValue} onChange={(e,nv) => handleTabChanged(nv)}>\n              <Tab label=\"Word List\"/>\n              <Tab label=\"Clues\"/>\n            </Tabs>\n            <TabPanel value={tabValue} index={0}>\n            <Paper className={clsScrollPaper} >\n              <WordList onClick={handleWordListClicked} currentWord={currentWord}/>\n            </Paper>\n            </TabPanel>\n            <TabPanel value={tabValue} index={1}>\n            <Paper className={clsScrollPaper} >\n              <Clues grid={grid} onClueFocus={handleClueFocus} onClueChanged={handleClueChanged}/>\n            </Paper>\n            </TabPanel>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}