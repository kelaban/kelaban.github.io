{"version":3,"sources":["logo.svg","constants.js","XGrid.js","NewPuzzleForm.js","helpers.js","KeyPressHandler.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DIRECTION_ACROSS","DIRECTION_DOWN","isDirectionAcross","v","BLOCKED_SQUARE","isBlockedSquare","Grid","grid","selected","currentWord","onClick","size","rows","cols","gridItems","Array","keys","map","i","row","Math","floor","column","val","isSelected","classNames","push","coordinates","some","cn","join","style","fontSize","length","key","className","gridnums","gridTemplateColumns","useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","NewPuzzleForm","onSave","classes","React","useState","open","setOpen","values","setValues","handleClose","save","handleChange","dir","event","Object","assign","target","value","Button","aria-label","color","startIcon","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","label","onChange","type","InputLabelProps","shrink","margin","variant","DialogActions","coord2dTo1d","col","valFrom2d","Movement","width","height","setSelected","this","min","max","direction","right","down","left","up","KeyPressHandler","props","setCurrentWord","updateGrid","hasFocus","handleKeyPressed","e","movement","old","moveBack","match","k","toUpperCase","ctrlKey","moveForward","useEffect","document","addEventListener","removeEventListener","Fragment","root","display","title","flexGrow","container","paddingLeft","paddingRight","paddingTop","paper","outline","padding","gridPaper","float","scroll","overflow","maxHeight","GridStats","letters","String","fromCharCode","reduce","acc","letterCounts","filter","calcWordCount","count","len","j","wordLengthsAccross","wordLengthsDown","totalCount","JSON","stringify","WordList","words","setWords","filtered","setFiltered","fetch","process","then","resp","text","split","l","startsWith","w","query","RegExp","word","List","dense","slice","ListItem","button","TabPanel","children","index","calcNumbers","out","r","num","makePuzzle","g","author","editor","copyright","publisher","date","clues","across","circles","App","tabValue","handleTabChanged","motionState","setMotionState","parse","localStorage","getItem","updateGridState","gridFocus","setGridFocus","nextGrid","setItem","valFor","x","isNotEnd","end","start","calcCurrentWord","nextSelected","nextCurrentWord","handleFocus","clsGridPaper","clsx","clsScrollPaper","kphProps","AppBar","position","Toolbar","Typography","blob","Blob","saveAs","component","input","reader","FileReader","onload","result","readAsText","files","Container","item","xs","Paper","onFocus","onBlur","tabindex","Tabs","nv","Tab","forEach","coord","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4038d92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\nexport const DIRECTION_ACROSS = \"ACROSS\"\nexport const DIRECTION_DOWN = \"DOWN\"\nexport const isDirectionAcross = (v) => v === DIRECTION_ACROSS\n\n\nexport const BLOCKED_SQUARE = '.'\nexport const isBlockedSquare = (v) => v === BLOCKED_SQUARE\n","import React from 'react';\nimport './XGrid.css';\nimport { isBlockedSquare }  from './constants';\n\nexport default function Grid({grid, selected, currentWord, onClick}) {\n  const {rows, cols} = grid.size\n  // go from 0 -> width*height and map to a block in the view\n  const gridItems = [...Array(rows*cols).keys()]\n      .map(i => {\n        const row = Math.floor(i / cols)\n        const column = Math.floor(i % cols)\n        const val = grid.grid[i]\n        const isSelected = selected && selected.row === row && selected.column === column\n        let classNames = [\"Grid-item\"]\n        if (isBlockedSquare(val)) {\n          classNames.push(\"Grid-item-blocked\")\n        }\n        if (isSelected) {\n          classNames.push(\"Grid-item-selected\")\n        } else if (currentWord.coordinates.some(i => i[0] === row && i[1] === column)) {\n          classNames.push(\"Grid-item-highlight\")\n        }\n        const cn = classNames.join(\" \")\n        const style = {\n          fontSize: `${(1/(val.length))*1.1}em`\n        }\n\n        return (\n          <div key={i} className={cn} onClick={() => onClick({row, column})}>\n            <span className=\"Grid-number\">{grid.gridnums[i] > 0 ? grid.gridnums[i] : ''}</span>\n            <span style={style}>{val}</span>\n          </div>\n        )\n      })\n\n  return (\n    <div\n      style={{\n        gridTemplateColumns: `repeat(${cols}, 1fr)`,\n      }}\n      className=\"Grid-container\"\n    >\n      {gridItems}\n    </div>\n  )\n}\n","import React, { Component, useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n}));\n\nexport default function NewPuzzleForm({onSave}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [values, setValues] = React.useState({rows: 15, cols: 15})\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (save) => () => {\n    setOpen(false);\n\n    if(save) {\n      onSave(values)\n    }\n\n  };\n\n  const handleChange = (dir) => (event) => {\n    setValues(Object.assign({}, values, {[dir]: +event.target.value}))\n  }\n\n  return (\n    <div>\n        <Button\n          aria-label=\"New puzzle\"\n          color=\"inherit\"\n          startIcon={<AddIcon />}\n          onClick={handleClickOpen}\n        >\n          New Puzzle\n        </Button>\n      <Dialog open={open} onClose={handleClose(false)}>\n        <DialogTitle>Create New Puzzle</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new puzzle. Warning! This will destroy the current puzzle. Make sure to save first!\n          </DialogContentText>\n          <TextField\n            label=\"Rows\"\n            value={values.rows}\n            onChange={handleChange('rows')}\n            className={classes.textField}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            label=\"Columns\"\n            value={values.cols}\n            onChange={handleChange('cols')}\n            className={classes.textField}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose(true)} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","\nexport const coord2dTo1d = (grid, row, col) => (grid.size.cols*row)+col\nexport const valFrom2d = (grid, row, col) => grid.grid[coord2dTo1d(grid, row, col)]\n","import React, { Component, useEffect } from 'react';\n\nimport {\n  isDirectionAcross,\n  isBlockedSquare,\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n  BLOCKED_SQUARE\n}  from './constants';\n\nimport {\ncoord2dTo1d,\nvalFrom2d\n} from './helpers';\n\nclass Movement {\n  constructor({selected, width, height, currentWord, setSelected}) {\n    this.selected = selected\n    this.width = width\n    this.height = height\n    this.setSelected = setSelected\n    this.currentWord = currentWord\n  }\n\n  right() {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.min(this.width-1, this.selected.column+1)\n    })\n  }\n\n  left() {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.max(0, this.selected.column-1)\n    })\n  }\n  up() {\n    this.setSelected({\n      row: Math.max(0, this.selected.row-1),\n      column: this.selected.column\n    })\n  }\n\n  down() {\n    this.setSelected({\n      row: Math.min(this.height-1, this.selected.row+1),\n      column: this.selected.column\n    })\n  }\n\n  moveForward() {\n    if (isDirectionAcross(this.currentWord.direction)) {\n      this.right()\n    } else {\n      this.down()\n    }\n  }\n  moveBack() {\n    if (isDirectionAcross(this.currentWord.direction)) {\n      this.left()\n    } else {\n      this.up()\n    }\n  }\n}\n\nexport default function KeyPressHandler(props) {\n  const {\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid,\n    hasFocus\n  } = props\n\n  const {rows: height, cols: width} = grid.size\n\n  const handleKeyPressed = (e) => {\n    if (!hasFocus) {\n      return\n    }\n\n    if (selected) {\n      const movement = new Movement({width, height, setSelected, currentWord, selected})\n\n      if (e.key === \"Backspace\") {\n        const old = valFrom2d(grid, selected.row, selected.column)\n        if (isBlockedSquare(old)) {\n          grid.grid[coord2dTo1d(grid, height - selected.row - 1, width - selected.column - 1)] = \"\"\n        }\n        grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = \"\"\n\n        movement.moveBack()\n        updateGrid(grid.grid)\n      } else if(e.key.match(/^[a-z0-9]$/i)) {\n        let k = e.key.toUpperCase()\n        if (e.ctrlKey) {\n          grid.grid[coord2dTo1d(grid, selected.row, selected.column)] += k\n        } else {\n          grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = k\n          movement.moveForward()\n        }\n        updateGrid(grid.grid)\n      } else if(e.key === BLOCKED_SQUARE) {\n        grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = e.key\n        grid.grid[coord2dTo1d(grid, height - selected.row - 1, width - selected.column - 1)] = e.key\n        movement.moveForward()\n        updateGrid(grid.grid)\n      } else if (e.key === ' ') {\n        setCurrentWord(Object.assign({}, currentWord, {\n          direction: currentWord.direction === DIRECTION_ACROSS ? DIRECTION_DOWN : DIRECTION_ACROSS\n        }))\n      } else if(e.key == 'ArrowRight') {\n        movement.right()\n      } else if(e.key == 'ArrowLeft') {\n        movement.left()\n      } else if(e.key == 'ArrowUp') {\n        movement.up()\n      } else if(e.key == 'ArrowDown') {\n        movement.down()\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPressed)\n    return () => {\n      document.removeEventListener('keydown', handleKeyPressed)\n    }\n  })\n\n  return <React.Fragment/>\n}\n","import React, { Component, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport logo from './logo.svg';\nimport './App.css';\nimport XGrid from './XGrid'\nimport NewPuzzleForm from './NewPuzzleForm'\nimport KeyPressHandler from './KeyPressHandler'\nimport {\n  isDirectionAcross,\n  isBlockedSquare,\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n  BLOCKED_SQUARE\n}  from './constants';\nimport { coord2dTo1d, valFrom2d } from './helpers';\n\nimport { saveAs } from 'file-saver';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport AddIcon from '@material-ui/icons/Add';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12,\n    paddingTop: 32,\n  },\n  paper: {\n    \"&:focus\": {\n      outline: 0,\n    },\n    padding: 10,\n  },\n  gridPaper: {\n    width: \"75vmin\",\n    height: \"75vmin\",\n    //clear the width\n    float: \"left\"\n  },\n  scroll: {\n    overflow: \"scroll\",\n    maxHeight: \"calc(100vh - 180px)\",\n  }\n}));\n\nconst GridStats = ({grid}) => {\n  // get {A: 0 ... Z:0)\n  const letters = [...Array(26).keys()].map(i => String.fromCharCode(i + 65)).reduce((acc, v) => ((acc[v] = 0) || acc), {})\n  // add counts of single letters\n  const letterCounts = grid.grid.map(v => v).filter(v => v && v.match(/^[A-Z]$/)).reduce((acc, v) => ((acc[v] = (acc[v] || 0) + 1) && acc), letters)\n\n  const calcWordCount = (down) => {\n    const count = {}\n    for (let i=0; i<=grid.size.rows; ++i) {\n      let len = 0\n      for (let j=0; j<=grid.size.cols; ++j) {\n        let v = down ?  valFrom2d(grid, j, i) : valFrom2d(grid, i, j)\n        if(isBlockedSquare(v)) {\n          len += 1\n        } else {\n          if (len > 0) {\n            count[len] = (count[len] || 0) + 1\n          }\n          len = 0\n        }\n      }\n      if (len > 0) {\n        count[len] = (count[len] || 0) + 1\n      }\n    }\n\n    return count\n  }\n\n  const wordLengthsAccross = calcWordCount()\n  const wordLengthsDown = calcWordCount(true)\n  const totalCount = Object.values(wordLengthsAccross).reduce((acc, v) => acc+v, 0) +\n                      Object.values(wordLengthsDown).reduce((acc, v) => acc+v, 0)\n\n  return (\n    <div>\n      {JSON.stringify(letterCounts)}\n      <br/>\n      Across\n      <br/>\n      {JSON.stringify(wordLengthsAccross)}\n      <br/>\n      Down\n      <br/>\n      {JSON.stringify(wordLengthsDown)}\n      <br/>\n      Total: {totalCount}\n    </div>\n  )\n}\n\n\nconst WordList = ({currentWord, onClick}) => {\n  const [words, setWords] = useState([])\n  const [filtered, setFiltered] = useState([])\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/wordlist/wordlist.txt`)\n      .then(resp => resp.text())\n      .then(text =>\n          text.split(\"\\n\")\n            .filter(l => !l.startsWith(\"#\")))\n      .then(w => setWords(w))\n  }, [])\n\n  useEffect(() => {\n    const query = new RegExp(\"^\"+currentWord.word+\"$\", \"i\")\n    setFiltered(words.filter(w => w.match(query)))\n  }, [currentWord.word])\n\n  const max = 100\n\n  /*\n          <ListItem\n            key={w}\n            component=\"a\"\n            target=\"_blank\"\n            href={`https://www.anagrammer.com/crossword-clues/${w}`}>\n            */\n\n  return <div>\n    Words: {filtered.length > max ? `showing ${max}/` : ''}{filtered.length}\n    <List dense>\n      {filtered.slice(0,max).map(w =>\n          <ListItem\n            button\n            onClick={() => onClick(w)}\n            key={w}>\n            {w}\n          </ListItem>\n       )}\n    </List>\n  </div>\n}\n\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  let style = {}\n  if (value !== index) {\n    style['display'] = \"none\"\n  }\n\n  return <div style={style}>\n    {children}\n  </div>\n}\n\n\n\n\nfunction calcNumbers(grid) {\n  const {rows, cols} = grid.size\n  let out = grid.grid.map(r => 0); // clone grid\n  let num = 1;\n  for (let i=0; i<rows; ++i){\n    for (let j=0; j<cols; ++j) {\n      if (isBlockedSquare(valFrom2d(grid, i, j))) continue;\n\n      if(\n        ((i === 0 || isBlockedSquare(valFrom2d(grid,i-1,j)) && (i !== rows || isBlockedSquare(valFrom2d(grid,i+1,j))))) ||\n        ((j === 0 || isBlockedSquare(valFrom2d(grid,i,j-1)) && (j !== cols || isBlockedSquare(valFrom2d(grid,i,j+1)))))) {\n        out[coord2dTo1d(grid, i, j)] = num++;\n      }\n    }\n  }\n\n  return out;\n}\n\nfunction calcCurrentWord({currentWord, grid, selected}) {\n    if (!selected) { return currentWord }\n\n    const valFor = (x) => isDirectionAcross(currentWord.direction) ? valFrom2d(grid, selected.row, x) : valFrom2d(grid, x, selected.column)\n    const coordinatesFor = (x) => isDirectionAcross(currentWord.direction) ? [selected.row, x] : [x, selected.column]\n    const isNotEnd = (end) => isDirectionAcross(currentWord.direction) ? end < grid.size.cols : end < grid.size.rows\n\n    let start = isDirectionAcross(currentWord.direction) ? selected.column : selected.row;\n    let end = start\n\n    // Find beginning\n    // Then find end of the word\n    // When convert those values into an string and convert blanks to . for word search\n    // also compile list of coordinates for grid highlighting\n    //  finally set the new state\n    while(start>0 && !isBlockedSquare(valFor(start))) start--;\n    while(isNotEnd(end) && !isBlockedSquare(valFor(end))) end++;\n    if (isBlockedSquare(valFor(start))) start++;\n\n    let word = \"\"\n    let coordinates = []\n\n    for(let i=start; i<end; ++i) {\n      let v = valFor(i)\n      if (v === \"\") v = \".\";\n      word += v\n      coordinates.push(coordinatesFor(i))\n    }\n\n    return Object.assign({}, currentWord, {\n      word,\n      coordinates\n    })\n}\n\n// Format specified by https://www.xwordinfo.com/JSON/\nconst makePuzzle = (size) => {\n  let g = {\n    title: \"TODO: NY Times, Thu, Sep 11, 2008\",\n    author: \"TODO: Caleb Madison\",\n    editor: \"TODO: Will Shortz\",\n    copyright: \"TODO: 2008, The New York Times\",\n    publisher: \"TODO: The New York Times\",\n    date: \"TODO: 9/11/2008\",\n    size,\n    // clues should include number as well e.g. \"1. Waxed\"\n    clues: {\n      across: [],\n      down: []\n    }\n  }\n  return Object.assign(g, {\n    // '.' means black, multiple letters valid for rebus\n    grid: [...Array(g.size.rows*g.size.cols).keys()].map(v => \"\"),\n    // 0 means no number\n    gridnums: [...Array(g.size.rows*g.size.cols).keys()].map(v => 0),\n    // TODO: 0 means circle 1 means circle\n    circles: [...Array(g.size.rows*g.size.cols).keys()].map(v => 0),\n  })\n}\n\n\nfunction App() {\n  const classes = useStyles()\n  const [tabValue, handleTabChanged] = useState(0)\n  const [motionState, setMotionState] = useState({\n    selected: null,\n    currentWord: {word: \"\", direction: DIRECTION_ACROSS, coordinates: []}\n  })\n  const [grid, updateGridState] = useState(JSON.parse(localStorage.getItem(\"grid\")) || makePuzzle({rows: 15, cols: 15}))\n  const [gridFocus, setGridFocus] = useState(false)\n\n  const {selected, currentWord} = motionState\n\n  const setCurrentWord = (currentWord) => {\n    setMotionState({\n      ...motionState,\n      currentWord\n    })\n  }\n\n  // updateGrid only updates the grid section of grid\n  const updateGrid = (nextGrid) => {\n    const g = Object.assign({}, grid, {grid: [...nextGrid]})\n    localStorage.setItem(\"grid\", JSON.stringify(g))\n    updateGridState(g)\n  }\n\n  useEffect(() =>\n    updateGridState(Object.assign({}, grid, {gridnums: calcNumbers(grid)})),\n    [grid.grid]\n  )\n\n  useEffect(() => {\n    setCurrentWord(calcCurrentWord({selected, currentWord, grid}))\n  },\n    [selected, currentWord.direction]\n  )\n\n\n  const setSelected = (nextSelected) => {\n    let nextCurrentWord = motionState.currentWord\n\n    if(nextSelected && selected && nextSelected.row === selected.row && nextSelected.column === selected.column) {\n      nextCurrentWord = {\n        ...nextCurrentWord,\n        direction: currentWord.direction === DIRECTION_ACROSS ? DIRECTION_DOWN : DIRECTION_ACROSS\n      }\n    }\n\n    setMotionState({\n      ...motionState,\n      selected: nextSelected,\n      currentWord: nextCurrentWord\n    })\n  }\n\n  const handleSavePuzzle = () => {\n    var blob = new Blob([JSON.stringify(grid)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"puzzle.json\")\n  }\n\n  // TODO handle failure and validate puzzle format\n  const handleImportPuzzle = (e) => {\n    let input = e.target;\n\n    let reader = new FileReader();\n    reader.onload = function(){\n      let text = reader.result;\n      updateGridState(JSON.parse(text))\n    };\n\n    reader.readAsText(input.files[0]);\n  }\n\n  const handleCreateNewPuzzle = (size) => {\n    updateGridState(makePuzzle(size))\n    setSelected()\n  }\n\n  const handleFocus = hasFocus => e => {\n    setGridFocus(hasFocus)\n  }\n\n  const handleWordListClicked = word => {\n    currentWord.coordinates.forEach((coord, i) => {\n      grid.grid[coord2dTo1d(grid, coord[0], coord[1])] = word[i]\n    })\n    updateGrid(grid.grid)\n  }\n\n\n  const clsGridPaper = clsx(classes.paper, classes.gridPaper)\n  const clsScrollPaper = clsx(classes.paper, classes.scroll)\n\n  const kphProps = {\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid,\n    hasFocus: gridFocus\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n       <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          XWordMaker\n        </Typography>\n        <Button\n          aria-label=\"Save puzzle\"\n          color=\"inherit\"\n          startIcon={<SaveAlt />}\n          onClick={handleSavePuzzle}\n        >\n          Save Puzzle\n        </Button>\n        <Button\n          aria-label=\"Load puzzle\"\n          color=\"inherit\"\n          component=\"label\"\n          startIcon={<ArrowUpwardIcon />}\n        >\n          Load Puzzle\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            onChange={handleImportPuzzle}\n            />\n        </Button>\n        <NewPuzzleForm onSave={handleCreateNewPuzzle}/>\n       </Toolbar>\n      </AppBar>\n      <KeyPressHandler {...kphProps} />\n      <Container className={classes.container}>\n        <Grid container spacing={0}>\n          <Grid item xs>\n            <Paper className={clsGridPaper} onFocus={handleFocus(true)} onBlur={handleFocus(false)} tabindex=\"0\">\n              <XGrid grid={grid} selected={motionState.selected} currentWord={motionState.currentWord} onClick={setSelected} />\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Tabs value={tabValue} onChange={(e,nv) => handleTabChanged(nv)}>\n              <Tab label=\"Word List\"/>\n              <Tab label=\"Grid Stats\"/>\n            </Tabs>\n            <TabPanel value={tabValue} index={0}>\n            <Paper className={clsScrollPaper} >\n              <WordList onClick={handleWordListClicked} currentWord={currentWord}/>\n            </Paper>\n            </TabPanel>\n            <TabPanel value={tabValue} index={1}>\n              <Paper className={clsScrollPaper} >\n                <GridStats grid={grid} />\n              </Paper>\n            </TabPanel>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}