{"version":3,"sources":["constants.js","XGrid.js","NewPuzzleForm.js","helpers.js","KeyPressHandler.js","Clues.js","Print.js","App.js","serviceWorker.js","index.js"],"names":["DIRECTION_ACROSS","DIRECTION_DOWN","isDirectionAcross","v","isBlockedSquare","UNDO_ACTION","REDO_ACTION","Grid","grid","selected","currentWord","hideAnswers","onClick","size","rows","cols","gridItems","Array","keys","map","i","row","Math","floor","column","val","classNames","push","coordinates","some","cn","join","style","fontSize","length","key","className","gridnums","gridTemplateColumns","gridTemplateRows","useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","NewPuzzleForm","onSave","classes","React","useState","open","setOpen","values","setValues","handleClose","save","handleChange","dir","event","Object","assign","target","value","Button","aria-label","color","startIcon","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","label","onChange","type","InputLabelProps","shrink","margin","variant","inputProps","min","max","DialogActions","coord2dTo1d","col","valFrom2d","Movement","props","right","setSelected","width","left","up","down","height","moveForward","direction","moveBack","this","KeyPressHandler","setRotationalSymettry","handleBackspace","e","movement","updateGrid","old","handleLetter","k","toUpperCase","ctrlKey","handleSpace","setCurrentWord","handleLeft","handleRight","handleUp","handleDown","handleUndo","handleRedo","cloneDeep","MOVE_UP","MOVE_LEFT","MOVE_RIGHT","MOVE_DOWN","ENTER_LETTER","BACKSPACE","SPACE","UNDO","REDO","keyMap","split","noOutline","outline","KeyPressHandlerComponent","hasFocus","setGridFocus","kph","handlers","handleFocus","_hasFocus","useEffect","forEach","cb","mousetrap","bind","unbind","ref","forwardRef","onFocus","onBlur","tabIndex","children","focused","decode","input","DOMParser","parseFromString","documentElement","textContent","Clue","word","clue","clueNum","match","trim","clueText","replace","disabled","error","focus","clsx","defaultValue","fullWidth","InputProps","memo","onClueFocus","onClueChanged","handleUpdateWord","mapClues","d","toLowerCase","clues","answers","across","container","item","xs","Typography","PrintView","liStyle","listStyleType","mapClue","overflow","marginTop","float","columnCount","padding","root","display","title","flexGrow","paddingLeft","paddingRight","paddingTop","paper","scroll","maxHeight","WORDLIST","WordList","words","setWordsState","filtered","setFiltered","debouncedFilter","useCallback","debounce","query","filter","w","fetch","process","then","resp","text","l","startsWith","setWords","RegExp","List","dense","slice","ListItem","button","TabPanel","index","makePuzzle","g","author","editor","copyright","publisher","date","circles","parseWordToClue","newWordToClue","parse","reduce","acc","ww","initialGridState","JSON","localStorage","getItem","wordToClue","history","undo","redo","currentWordInitialState","gridRef","createRef","ReactiveGrid","setWidth","handleResize","current","clientWidth","window","addEventListener","removeEventListener","MAX_HISTORY","hotKeyRef","App","useTheme","isPrint","setIsPrint","tabValue","handleTabChanged","motionState","setMotionState","gridState","updateAllGridState","updateAllGridStateFromPrevious","prevState","nextState","past","previous","newPast","future","next","newFuture","out","r","num","j","isNewDown","isNewAcross","start","calcNumbersAndAnswers","updateGridState","nextGrid","extraState","setItem","stringify","nextCw","valFor","x","coordinatesFor","isNotEnd","end","calcCurrentWord","nextSelected","nextCurrentWord","handleClueFocus","handleClueChanged","updateWordToClue","handleWordListClicked","gridCopy","coord","clsGridPaper","clsScrollPaper","kphProps","matchMedia","addListener","matches","onbeforeprint","onafterprint","separateGrid","useMediaQuery","breakpoints","tabs","Paper","gridComponent","_gridComponent","renderedTabs","Fragment","Tabs","nv","t","Tab","AppBar","position","Toolbar","blob","Blob","saveAs","component","reader","FileReader","onload","result","newGrid","readAsText","files","Container","lg","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5284a6e6.chunk.js","sourcesContent":["\nexport const DIRECTION_ACROSS = \"ACROSS\"\nexport const DIRECTION_DOWN = \"DOWN\"\nexport const isDirectionAcross = (v) => v === DIRECTION_ACROSS\n\n\nexport const BLOCKED_SQUARE = '.'\nexport const isBlockedSquare = (v) => v === BLOCKED_SQUARE\n\nexport const UNDO_ACTION = \"UNDO\"\nexport const REDO_ACTION = \"REDO\"\n","import React from 'react';\nimport './XGrid.css';\nimport { isBlockedSquare }  from './constants';\n\nexport default function Grid({grid, selected, currentWord, hideAnswers, onClick}) {\n  const {rows, cols} = grid.size\n  // go from 0 -> width*height and map to a block in the view\n  const gridItems = [...Array(rows*cols).keys()]\n      .map(i => {\n        const row = Math.floor(i / cols)\n        const column = Math.floor(i % cols)\n        const val =  grid.grid[i]\n        const isSelected = selected && selected.row === row && selected.column === column\n        let classNames = [\"Grid-item\"]\n        if(isSelected) {\n          classNames.push(\"Grid-item-selected\")\n        } else if (isBlockedSquare(val)) {\n          classNames.push(\"Grid-item-blocked\")\n        } else if (currentWord && currentWord.coordinates.some(i => i[0] === row && i[1] === column)) {\n          classNames.push(\"Grid-item-highlight\")\n        }\n        const cn = classNames.join(\" \")\n        const style = {\n          fontSize: `${(1/(val.length))*1.1}em`\n        }\n\n        return (\n          <div key={i} className={cn} onClick={() => onClick({row, column})}>\n            <span className=\"Grid-number\">{grid.gridnums[i] > 0 ? grid.gridnums[i] : ''}</span>\n            <span style={style}>{hideAnswers ? ' ' : val}</span>\n          </div>\n        )\n      })\n\n  return (\n    <div\n      style={{\n        gridTemplateColumns: `repeat(${cols}, 1fr)`,\n        gridTemplateRows: `repeat(${rows}, 1fr)`,\n      }}\n      className=\"Grid-container\"\n    >\n      {gridItems}\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n}));\n\nexport default function NewPuzzleForm({onSave}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [values, setValues] = React.useState({rows: 15, cols: 15})\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (save) => () => {\n    setOpen(false);\n\n    if(save) {\n      onSave(values)\n    }\n\n  };\n\n  const handleChange = (dir) => (event) => {\n    setValues(Object.assign({}, values, {[dir]: +event.target.value || ''}))\n  }\n\n  return (\n    <div>\n        <Button\n          aria-label=\"New puzzle\"\n          color=\"inherit\"\n          startIcon={<AddIcon />}\n          onClick={handleClickOpen}\n        >\n          New Puzzle\n        </Button>\n      <Dialog open={open} onClose={handleClose(false)}>\n        <DialogTitle>Create New Puzzle</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new puzzle. Warning! This will destroy the current puzzle. Make sure to save first!\n          </DialogContentText>\n          <TextField\n            label=\"Rows\"\n            value={values.rows}\n            onChange={handleChange('rows')}\n            className={classes.textField}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n            variant=\"outlined\"\n            inputProps={{\n              min: 1,\n              max: 100\n            }}\n          />\n          <TextField\n            label=\"Columns\"\n            value={values.cols}\n            onChange={handleChange('cols')}\n            className={classes.textField}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n            variant=\"outlined\"\n            inputProps={{\n              min: 1,\n              max: 100\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose(true)} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","\nexport const coord2dTo1d = (grid, row, col) => (grid.size.cols*row)+col\nexport const valFrom2d = (grid, row, col) => grid.grid[coord2dTo1d(grid, row, col)]\n","import React, { Component, useEffect, useState } from 'react';\nimport {\n  isDirectionAcross,\n  isBlockedSquare,\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n  BLOCKED_SQUARE,\n  UNDO_ACTION,\n  REDO_ACTION\n}  from './constants';\nimport {\ncoord2dTo1d,\nvalFrom2d\n} from './helpers';\n\nimport mousetrap from 'mousetrap'\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {cloneDeep} from 'lodash';\n\n\nclass Movement {\n  constructor(props) {\n    const {selected, width, height, currentWord, setSelected} = props\n    this.width = width\n    this.height = height\n    this.selected = selected\n    this.setSelected = setSelected\n    this.currentWord = currentWord\n  }\n\n  right = () => {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.min(this.width-1, this.selected.column+1)\n    })\n  }\n\n  left = () => {\n    this.setSelected({\n      row: this.selected.row,\n      column: Math.max(0, this.selected.column-1)\n    })\n  }\n  up = () => {\n    this.setSelected({\n      row: Math.max(0, this.selected.row-1),\n      column: this.selected.column\n    })\n  }\n\n  down = () => {\n    this.setSelected({\n      row: Math.min(this.height-1, this.selected.row+1),\n      column: this.selected.column\n    })\n  }\n\n  moveForward = () => {\n    if (isDirectionAcross(this.currentWord.direction)) {\n      this.right()\n    } else {\n      this.down()\n    }\n  }\n  moveBack = () => {\n    if (isDirectionAcross(this.currentWord.direction)) {\n      this.left()\n    } else {\n      this.up()\n    }\n  }\n}\n\nclass KeyPressHandler {\n  constructor(props) {\n    this.selected = props.selected\n    this.setSelected = props.setSelected\n    this.currentWord = props.currentWord\n    this.setCurrentWord = props.setCurrentWord\n    this.grid = cloneDeep(props.grid)\n    this.updateGrid = props.updateGrid\n    this.rows = props.grid.size.rows\n    this.cols = props.grid.size.cols\n    this.movement = new Movement({\n      width: props.grid.size.cols,\n      height: props.grid.size.rows,\n      setSelected: props.setSelected,\n      currentWord: props.currentWord,\n      selected: props.selected\n    })\n  }\n\n  setRotationalSymettry = (v) => {\n    this.grid.grid[coord2dTo1d(this.grid, this.rows - this.selected.row - 1, this.cols - this.selected.column - 1)] = v\n  }\n\n  handleBackspace = (e) => {\n    const {grid, selected, rows, cols, movement, updateGrid} = this\n\n    const old = valFrom2d(grid, selected.row, selected.column)\n\n    if (isBlockedSquare(old)) {\n      this.setRotationalSymettry('')\n    }\n\n    grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = ''\n\n    movement.moveBack()\n    updateGrid(grid)\n  }\n\n  handleLetter = (e) => {\n    let k = e.key.toUpperCase()\n    const {grid, selected, rows, cols, movement, updateGrid} = this\n\n    if(e.key === BLOCKED_SQUARE) {\n      grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = k\n      this.setRotationalSymettry(k)\n      movement.moveForward()\n      updateGrid(grid)\n    } else if (e.ctrlKey) {\n      grid.grid[coord2dTo1d(grid, selected.row, selected.column)] += k\n      updateGrid(grid)\n    } else {\n      const old = valFrom2d(grid, selected.row, selected.column)\n      if (old === k) {\n        // don't issue grid update if its the same letter\n        movement.moveForward()\n        return\n      }\n      if (isBlockedSquare(old)) {\n        this.setRotationalSymettry('')\n      }\n      grid.grid[coord2dTo1d(grid, selected.row, selected.column)] = k\n      movement.moveForward()\n      updateGrid(grid)\n    }\n  }\n\n  handleSpace = (e) => {\n    const {setCurrentWord, currentWord} = this\n    setCurrentWord(Object.assign({}, currentWord, {\n      direction: isDirectionAcross(currentWord.direction) ? DIRECTION_DOWN : DIRECTION_ACROSS\n    }))\n  }\n\n  handleLeft = () => {\n    this.movement.left()\n  }\n\n  handleRight = () => {\n    this.movement.right()\n  }\n\n  handleUp = () => {\n    this.movement.up()\n  }\n\n  handleDown = () => {\n    this.movement.down()\n  }\n\n  handleUndo = () => {\n    this.updateGrid(UNDO_ACTION)\n  }\n\n  handleRedo = () => {\n    this.updateGrid(REDO_ACTION)\n  }\n\n}\n\nconst MOVE_UP = 'MOVE_UP'\nconst MOVE_LEFT = 'MOVE_LEFT'\nconst MOVE_RIGHT = 'MOVE_RIGHT'\nconst MOVE_DOWN = 'MOVE_DOWN'\nconst ENTER_LETTER = 'ENTER_LETTER'\nconst BACKSPACE = 'BACKSPACE'\nconst SPACE = 'SPACE'\nconst UNDO = 'UNDO'\nconst REDO = 'REDO'\n\nconst keyMap = {\n  [MOVE_UP]: 'up',\n  [MOVE_DOWN]: 'down',\n  [MOVE_LEFT]: 'left',\n  [MOVE_RIGHT]: 'right',\n  [ENTER_LETTER]: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.\".split(''),\n  [BACKSPACE]: ['del', 'backspace'],\n  [SPACE]: 'space',\n  [UNDO]: 'mod+z',\n  [REDO]: 'mod+shift+z',\n}\n\nconst useStyles = makeStyles(theme => ({\n noOutline: {\n    \"&:focus\": {\n      outline: 0,\n    }\n }\n}))\n\n\nexport default function KeyPressHandlerComponent(props) {\n  const classes = useStyles()\n\n  const [hasFocus, setGridFocus] = useState(false)\n\n  const kph = new KeyPressHandler(props)\n\n  const handlers = {\n    [MOVE_UP]: kph.handleUp,\n    [MOVE_DOWN]: kph.handleDown,\n    [MOVE_LEFT]: kph.handleLeft,\n    [MOVE_RIGHT]: kph.handleRight,\n    [ENTER_LETTER]: kph.handleLetter,\n    [BACKSPACE]: kph.handleBackspace,\n    [SPACE]: kph.handleSpace,\n    [UNDO]: kph.handleUndo,\n    [REDO]: kph.handleRedo,\n  }\n\n  const handleFocus = _hasFocus => e => {\n    setGridFocus(_hasFocus)\n  }\n\n  const withFocus = cb => (e) => hasFocus && cb(e)\n\n  useEffect(() => {\n    Object.keys(keyMap).forEach((k) => {\n      mousetrap.bind(keyMap[k], withFocus(handlers[k]))\n    })\n    return () => {\n      Object.keys(keyMap).forEach((k) => {\n        mousetrap.unbind(keyMap[k])\n      })\n    }\n  })\n\n\n  return (\n    <div ref={props.forwardRef} className={classes.noOutline} onFocus={handleFocus(true)} onBlur={handleFocus(false)} tabIndex=\"-1\">\n      {props.children}\n    </div>\n  )\n}\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n}  from './constants';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  // pseudo class to apply when we want to style focus\n  // withouth applying real focus\n  focused: {}\n}));\n\nexport function decode(input)\n{\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\n  return doc.documentElement.textContent;\n}\n\nfunction Clue({word, clue, dir, currentWord, onClick, onBlur}) {\n  // how do i make classes generate the right name 'Mui-focused'\n  const classes = useStyles()\n  const clueNum = +clue.match(/^ *[0-9]+/)[0].trim()\n  const clueText = decode(clue.replace(/^ *[0-9]*\\. */, ''))\n  const disabled = word.match(\"_\")\n  const error = !disabled && !clueText.length\n  const focus = currentWord.clueNum === clueNum && currentWord.direction === dir\n  const className = clsx({'Mui-focused': focus})\n  return (\n      <TextField\n        label={`${clueNum}: ${word}`}\n        defaultValue={clueText}\n        type=\"text\"\n        margin=\"dense\"\n        variant=\"outlined\"\n        fullWidth\n        onClick={onClick(dir, clueNum)}\n        onBlur={onBlur(dir, word)}\n        disabled={disabled}\n        error={error}\n        InputLabelProps={{className}}\n        InputProps={{className}}\n      />\n  )\n}\n\nexport default memo(function Clues({grid, currentWord, onClueFocus, onClueChanged}) {\n    const handleFocus = (dir, clueNum) => (e) => {\n      onClueFocus(dir, clueNum)\n    }\n\n    const handleUpdateWord = (dir, word) => e => {\n      onClueChanged(dir, word, e.target.value)\n    }\n\n    const mapClues = (dir) => {\n      const d = dir.toLowerCase()\n      return grid.clues[d].map((clue, i) => {\n        const word = grid.answers[d][i]\n        return <Clue\n          key={`${d}-${i}-${word}`}\n          word={word}\n          clue={clue}\n          dir={dir}\n          currentWord={currentWord}\n            onClick={handleFocus}\n            onBlur={handleUpdateWord}\n        />\n      })\n    }\n\n    const across = mapClues(DIRECTION_ACROSS)\n    const down = mapClues(DIRECTION_DOWN)\n    return (\n      <div>\n        <Grid container spacing={1}>\n          <Grid item xs>\n            <Typography>Across</Typography>\n              {across}\n          </Grid>\n          <Grid item xs>\n            <Typography>Down</Typography>\n              {down}\n          </Grid>\n        </Grid>\n      </div>\n    )\n  })\n","import React from 'react';\n\nimport XGrid from './XGrid'\nimport {decode} from './Clues'\n\n\nexport default function PrintView({grid}) {\n  const ulStyle = {\n    width: 'calc(50vw - 40px)',\n    columnCount: 2,\n    margin: 0,\n    padding: 0,\n  }\n  const liStyle = {\n    margin: 0,\n    listStyleType: 'none',\n  }\n\n  const containerStyle = {\n    overflow: 'hidden',\n    marginTop: 40,\n    marginRight: 20,\n    marginLeft: 20,\n    height: \"calc(100vh - 40px)\",\n  }\n\n  const gridStyle = {\n    float: 'right',\n    width: '50vmin',\n    height: '50vmin'\n  }\n\n  const mapClue = (v)  => {\n    const clueNum = +v.match(/^ *[0-9]+/)[0].trim()\n    const clueText = decode(v.replace(/^ *[0-9]*\\. */, ''))\n    return (\n      <li style={liStyle} key={v}>\n        <b style={{marginRight: 2}}>{clueNum}</b>\n        {clueText}\n      </li>\n    )\n  }\n\n  /*\n      */\n  return (\n    <div style={containerStyle}>\n      <div style={gridStyle}>\n        <XGrid grid={grid} hideAnswers={true}/>\n      </div>\n      <ul style={ulStyle}>\n        <li style={liStyle}><b>ACROSS</b></li>\n        {grid.clues.across.map(mapClue)}\n        <li style={liStyle}><b>DOWN</b></li>\n        {grid.clues.down.map(mapClue)}\n      </ul>\n    </div>\n  )\n}\n","import React, { memo, useState, useEffect, useCallback } from 'react';\nimport clsx from 'clsx';\nimport './App.css';\nimport XGrid from './XGrid'\nimport NewPuzzleForm from './NewPuzzleForm'\nimport KeyPressHandler from './KeyPressHandler'\nimport Clues, {decode} from './Clues'\nimport PrintView from './Print'\nimport {\n  isDirectionAcross,\n  isBlockedSquare,\n  DIRECTION_ACROSS,\n  DIRECTION_DOWN,\n  UNDO_ACTION,\n  REDO_ACTION\n}  from './constants';\nimport { coord2dTo1d, valFrom2d } from './helpers';\n\nimport { saveAs } from 'file-saver';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nimport {cloneDeep, debounce} from 'lodash';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12,\n    paddingTop: 32,\n  },\n  paper: {\n    padding: 10,\n  },\n  scroll: {\n    overflow: \"scroll\",\n    maxHeight: \"calc(100vh - 180px)\",\n  }\n}));\n\nconst GridStats = ({grid}) => {\n  return null\n  // get {A: 0 ... Z:0)\n  const letters = [...Array(26).keys()].map(i => String.fromCharCode(i + 65)).reduce((acc, v) => ((acc[v] = 0) || acc), {})\n  // add counts of single letters\n  const letterCounts = grid.grid.map(v => v).filter(v => v && v.match(/^[A-Z]$/)).reduce((acc, v) => ((acc[v] = (acc[v] || 0) + 1) && acc), letters)\n\n  const calcWordCount = (down) => {\n    const count = {}\n    for (let i=0; i<=grid.size.rows; ++i) {\n      let len = 0\n      for (let j=0; j<=grid.size.cols; ++j) {\n        let v = down ?  valFrom2d(grid, j, i) : valFrom2d(grid, i, j)\n        if(isBlockedSquare(v)) {\n          len += 1\n        } else {\n          if (len > 0) {\n            count[len] = (count[len] || 0) + 1\n          }\n          len = 0\n        }\n      }\n      if (len > 0) {\n        count[len] = (count[len] || 0) + 1\n      }\n    }\n\n    return count\n  }\n\n  const wordLengthsAccross = calcWordCount()\n  const wordLengthsDown = calcWordCount(true)\n  const totalCount = Object.values(wordLengthsAccross).reduce((acc, v) => acc+v, 0) +\n                      Object.values(wordLengthsDown).reduce((acc, v) => acc+v, 0)\n\n  return (\n    <div>\n      {JSON.stringify(letterCounts)}\n      <br/>\n      Across\n      <br/>\n      {JSON.stringify(wordLengthsAccross)}\n      <br/>\n      Down\n      <br/>\n      {JSON.stringify(wordLengthsDown)}\n      <br/>\n      Total: {totalCount}\n    </div>\n  )\n}\n\n\nlet WORDLIST = null\n\nconst WordList = memo(({currentWord, onClick}) => {\n  const [words, setWordsState] = useState(WORDLIST || [])\n  const [filtered, setFiltered] = useState([])\n\n  const setWords = (words) => {\n    //cache wordlist incase component unmounts\n    WORDLIST = words\n    setWordsState(words)\n  }\n\n  const debouncedFilter = useCallback(debounce( query => {\n    setFiltered(words.filter(w => w.match(query)))\n  }, 300), [words])\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/wordlist/wordlist.txt`)\n      .then(resp => resp.text())\n      .then(text =>\n          text.split(\"\\n\")\n            .filter(l => !l.startsWith(\"#\")))\n      .then(w => setWords(w))\n  }, [])\n\n  useEffect(() => {\n    debouncedFilter(new RegExp(\"^\"+currentWord.word+\"$\", \"i\"))\n  }, [words, currentWord.word])\n\n  const max = 100\n\n  /*\n          <ListItem\n            key={w}\n            component=\"a\"\n            target=\"_blank\"\n            href={`https://www.anagrammer.com/crossword-clues/${w}`}>\n            */\n\n  return <div>\n    Words: {filtered.length > max ? `showing ${max}/` : ''}{filtered.length}\n    <List dense>\n      {filtered.slice(0,max).map(w =>\n          <ListItem\n            button\n            onClick={() => onClick(w)}\n            key={w}>\n            {w}\n          </ListItem>\n       )}\n    </List>\n  </div>\n})\n\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  let style = {}\n  let hidden = value !== index\n\n  if (hidden) {\n    return <div></div>\n  }\n\n  return <div>\n    {children}\n  </div>\n}\n\n\nfunction calcNumbersAndAnswers(grid, wordToClue) {\n  const {rows, cols} = grid.size\n  let out = {\n    gridnums: grid.grid.map(r => 0), // clone grid\n    answers: {down: [], across: []},\n    clues: {down: [], across: []}\n  }\n\n  let num = 1;\n  for (let i=0; i<rows; ++i){\n    for (let j=0; j<cols; ++j) {\n      if (isBlockedSquare(valFrom2d(grid, i, j))) continue;\n\n      const isNewDown = (i === 0 || isBlockedSquare(valFrom2d(grid,i-1,j))) && !(i === rows || isBlockedSquare(valFrom2d(grid,i+1,j)))\n      const isNewAcross = (j === 0 || isBlockedSquare(valFrom2d(grid,i,j-1))) && !(j === cols || isBlockedSquare(valFrom2d(grid,i,j+1)))\n      if(isNewAcross || isNewDown) {\n        out.gridnums[coord2dTo1d(grid, i, j)] = num++;\n      }\n\n      if(isNewAcross) {\n        let currentWord = \"\"\n        let start = j;\n        while(!isBlockedSquare(valFrom2d(grid,i,start)) && start < cols) {\n          let w = valFrom2d(grid, i, start)\n          currentWord += w ? w : '_'\n          start++\n        }\n        out.answers.across.push(currentWord)\n        let clue = wordToClue[currentWord] || ''\n        out.clues.across.push(`${num-1}. ${clue}`)\n      }\n\n      if(isNewDown) {\n        let currentWord = \"\"\n        let start = i;\n        while(!isBlockedSquare(valFrom2d(grid,start,j)) && start < rows) {\n          let w = valFrom2d(grid, start, j)\n          currentWord += w ? w : '_'\n          start++\n        }\n        out.answers.down.push(currentWord)\n        let clue = wordToClue[currentWord] || ''\n        out.clues.down.push(`${num-1}. ${clue}`)\n      }\n\n    }\n  }\n\n  return out;\n}\n\nfunction calcCurrentWord({direction, grid, selected}) {\n    if (!selected) { return null }\n\n    const valFor = (x) => isDirectionAcross(direction) ? valFrom2d(grid, selected.row, x) : valFrom2d(grid, x, selected.column)\n    const coordinatesFor = (x) => isDirectionAcross(direction) ? [selected.row, x] : [x, selected.column]\n    const isNotEnd = (end) => isDirectionAcross(direction) ? end < grid.size.cols : end < grid.size.rows\n\n    let start = isDirectionAcross(direction) ? selected.column : selected.row;\n    let end = start\n\n    // Find beginning\n    // Then find end of the word\n    // When convert those values into an string and convert blanks to . for word search\n    // also compile list of coordinates for grid highlighting\n    //  finally set the new state\n    while(start>0 && !isBlockedSquare(valFor(start))) start--;\n    while(isNotEnd(end) && !isBlockedSquare(valFor(end))) end++;\n    if (isBlockedSquare(valFor(start))) start++;\n\n    let word = \"\"\n    let coordinates = []\n    const clueNum = grid.gridnums[coord2dTo1d(grid, coordinatesFor(start)[0], coordinatesFor(start)[1])]\n\n    for(let i=start; i<end; ++i) {\n      let v = valFor(i)\n      if (v === \"\") v = \".\";\n      word += v\n      coordinates.push(coordinatesFor(i))\n    }\n\n    return { word, coordinates, clueNum }\n}\n\n// Format specified by https://www.xwordinfo.com/JSON/\nconst makePuzzle = (size) => {\n  let g = {\n    title: \"TODO: NY Times, Thu, Sep 11, 2008\",\n    author: \"TODO: Caleb Madison\",\n    editor: \"TODO: Will Shortz\",\n    copyright: \"TODO: 2008, The New York Times\",\n    publisher: \"TODO: The New York Times\",\n    date: \"TODO: 9/11/2008\",\n    size,\n    // clues should include number as well e.g. \"1. Waxed\"\n    clues: {\n      across: [],\n      down: []\n    }\n  }\n  return Object.assign(g, {\n    // '.' means black, multiple letters valid for rebus\n    grid: [...Array(g.size.rows*g.size.cols).keys()].map(v => \"\"),\n    // 0 means no number\n    gridnums: [...Array(g.size.rows*g.size.cols).keys()].map(v => 0),\n    // TODO: 0 means circle 1 means circle\n    circles: [...Array(g.size.rows*g.size.cols).keys()].map(v => 0),\n  })\n}\n\nfunction parseWordToClue(grid) {;\n  const newWordToClue = {}\n  if (grid.answers) {\n    const parse = dir => {\n      grid.answers[dir]\n      .filter(w => !w.match('_'))\n      .reduce((acc, w, i) => {\n        let ww = (grid.clues[dir][i] || '').replace(/^ *[0-9]*\\. */, '')\n        acc[w] = ww\n        return acc\n      }, newWordToClue)\n    }\n\n    parse('down')\n    parse('across')\n  }\n\n  return newWordToClue\n}\n\nconst initialGridState = function intialGridState() {\n    const grid = JSON.parse(localStorage.getItem(\"grid\")) || makePuzzle({rows: 15, cols: 15})\n    const wordToClue = parseWordToClue(grid)\n    const history = JSON.parse(localStorage.getItem(\"history\")) || {undo: [], redo: []}\n\n    return {grid, wordToClue, history}\n}()\n\nconst currentWordInitialState = {word: \"\", direction: DIRECTION_ACROSS, coordinates: []}\n\nconst gridRef = React.createRef();\nfunction ReactiveGrid({children}) {\n  let [width, setWidth] = useState(\"100%\")\n\n  const handleResize = () => {\n    gridRef.current && setWidth(gridRef.current.clientWidth)\n  }\n\n  useEffect(() => {\n    // add event listener then call function on first render to ensure size is correct\n    window.addEventListener('resize', handleResize)\n    handleResize()\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  return (\n    <div ref={gridRef} style={{width: width, height: width}}>\n      {children}\n    </div>\n  )\n\n}\n\nconst MAX_HISTORY = 25\n\nconst hotKeyRef = React.createRef()\n\n\nfunction App() {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [isPrint, setIsPrint] = useState(false)\n  const [tabValue, handleTabChanged] = useState(0)\n  const [motionState, setMotionState] = useState({selected: null, currentWord: currentWordInitialState})\n  const [gridState, updateAllGridState] = useState(initialGridState)\n  const {wordToClue, grid, history} = gridState\n\n\n  const {selected, currentWord} = motionState\n\n  //cb can be a function which recieves the previous state\n  // or a string which is either the UNDO or REDO action\n  const updateAllGridStateFromPrevious = (cb) => {\n    updateAllGridState((prevState) => {\n      let nextState = null\n      switch(cb) {\n        case UNDO_ACTION:\n          nextState = {...prevState}\n          const past = prevState.history.undo\n          if (!past.length) {\n            break\n          }\n          const previous = past[past.length - 1]\n          const newPast = past.slice(0, past.length - 1)\n          nextState.grid = previous\n          nextState.history = {\n            undo: newPast,\n            redo: [prevState.grid, ...prevState.history.redo]\n          }\n          break;\n        case REDO_ACTION:\n          nextState = {...prevState}\n          const future = prevState.history.redo\n          if (!future.length) {\n            break\n          }\n          const next = future[0]\n          const newFuture = future.slice(1)\n          nextState.grid = next\n          nextState.history = {\n            undo: [...prevState.history.undo, prevState.grid],\n            redo: newFuture\n          }\n          break;\n        default:\n          nextState = cb(prevState)\n          nextState.grid = {...nextState.grid, ...calcNumbersAndAnswers(nextState.grid, nextState.wordToClue)}\n          // since history gets pushed on the the stack slice off the start of the history to keep the size small enough\n          nextState.history.undo = nextState.history.undo.slice(-MAX_HISTORY)\n          nextState.history.undo.push(prevState.grid)\n          nextState.history.redo = []\n      }\n\n      return nextState\n    })\n  }\n\n\n  const updateGridState = (nextGrid, extraState) => {\n    if (nextGrid === UNDO_ACTION || nextGrid === REDO_ACTION) {\n      updateAllGridStateFromPrevious(nextGrid)\n    } else {\n      extraState = extraState || {}\n      updateAllGridStateFromPrevious((prevState) => ({\n        ...prevState,\n        ...extraState,\n        grid: nextGrid\n      }))\n    }\n  }\n\n  const updateWordToClue = (word, clue) => {\n    updateAllGridStateFromPrevious((prevState) => ({\n        ...prevState,\n        wordToClue: {\n          ...prevState.wordToClue,\n          [word]: clue\n        }\n    }))\n  }\n\n  const setCurrentWord = useCallback((currentWord) => {\n    setMotionState((prevState) => ({\n      ...prevState,\n      currentWord: {\n        ...prevState.currentWord,\n        ...currentWord\n      }\n    }))\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"grid\", JSON.stringify(grid))\n    localStorage.setItem(\"history\", JSON.stringify(history))\n  },\n    [grid, history]\n  )\n\n  useEffect(() => {\n    const nextCw = calcCurrentWord({selected, direction: currentWord.direction, grid})\n    nextCw && setCurrentWord(nextCw)\n  }, [setCurrentWord, selected, grid, currentWord.direction])\n\n\n  const setSelected = (nextSelected) => {\n    let nextCurrentWord = motionState.currentWord\n\n    //swap direction if selected is double clicked\n    if(nextSelected && selected && nextSelected.row === selected.row && nextSelected.column === selected.column) {\n      nextCurrentWord = {\n        ...nextCurrentWord,\n        direction: currentWord.direction === DIRECTION_ACROSS ? DIRECTION_DOWN : DIRECTION_ACROSS\n      }\n    }\n\n    setMotionState({\n      ...motionState,\n      selected: nextSelected,\n      currentWord: nextCurrentWord\n    })\n  }\n\n  const handleClueFocus = useCallback((direction, clueNum) => {\n    let selected = {}\n    for(let i=0; i<grid.gridnums.length; ++i) {\n      if(grid.gridnums[i] == clueNum) {\n        const row = Math.floor(i / grid.size.cols)\n        const column = Math.floor(i % grid.size.cols)\n        selected = {\n          row, column\n        }\n        break;\n      }\n    }\n\n    setMotionState((prevState) => ({\n      ...prevState,\n      currentWord: {\n        ...currentWordInitialState,\n        direction,\n      },\n      selected,\n    }))\n  }, [grid])\n\n  const handleClueChanged = useCallback((direction, word, clue) => {\n    updateWordToClue(word, clue)\n  }, [])\n\n  const handleSavePuzzle = () => {\n    var blob = new Blob([JSON.stringify(grid)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"puzzle.json\")\n  }\n\n  // TODO handle failure and validate puzzle format\n  const handleImportPuzzle = (e) => {\n    let input = e.target;\n    if (!input.value) {\n      return;\n    }\n\n    let reader = new FileReader();\n    reader.onload = function(){\n      let text = reader.result;\n      const newGrid = JSON.parse(text)\n      updateGridState(newGrid, {\n        wordToClue: parseWordToClue(newGrid)\n      })\n    };\n\n    reader.readAsText(input.files[0]);\n    input.value = '';\n  }\n\n  const handleCreateNewPuzzle = (size) => {\n    updateGridState(makePuzzle(size))\n    setSelected()\n  }\n\n  const handleWordListClicked = useCallback(word => {\n    const gridCopy = cloneDeep(grid)\n    currentWord.coordinates.forEach((coord, i) => {\n      gridCopy.grid[coord2dTo1d(grid, coord[0], coord[1])] = word[i]\n    })\n    hotKeyRef.current.focus()\n    updateGridState(gridCopy)\n  }, [grid, currentWord])\n\n\n  const clsGridPaper = clsx(classes.paper)\n  const clsScrollPaper = clsx(classes.paper, classes.scroll)\n\n  const kphProps = {\n    selected,\n    setSelected,\n    setCurrentWord,\n    currentWord,\n    grid,\n    updateGrid: updateGridState,\n    forwardRef: hotKeyRef,\n  }\n\n  useEffect(() => {\n    const listener = (e) => setIsPrint(e.matches)\n    window.matchMedia(\"print\").addListener(listener)\n    window.onbeforeprint = () => setIsPrint(true)\n    window.onafterprint = () => setIsPrint(false)\n  }, [])\n\n  const separateGrid = useMediaQuery(theme.breakpoints.up('lg'))\n\n  if (isPrint) {\n    return <PrintView grid={grid} />\n  }\n\n  let tabs = [\n    {label: \"Word List\", children: (\n      <Paper className={clsScrollPaper} >\n        <WordList onClick={handleWordListClicked} currentWord={currentWord}/>\n      </Paper>\n    )},\n    {label: \"Clues\", children: (\n      <Paper className={clsScrollPaper} >\n        <Clues currentWord={currentWord} grid={grid} onClueFocus={handleClueFocus} onClueChanged={handleClueChanged}/>\n      </Paper>\n    )},\n  ]\n\n  let gridComponent = null\n\n  const _gridComponent = (\n    <KeyPressHandler {...kphProps}>\n      <Paper className={clsGridPaper} >\n        <ReactiveGrid>\n          <XGrid grid={grid} selected={motionState.selected} currentWord={motionState.currentWord} onClick={setSelected} />\n        </ReactiveGrid>\n      </Paper>\n    </KeyPressHandler>\n  )\n\n  if (separateGrid) {\n    gridComponent = _gridComponent\n  } else {\n    tabs = [{label: \"Grid\", children: _gridComponent}, ...tabs]\n  }\n\n  const renderedTabs = (\n    <React.Fragment>\n      <Tabs value={tabValue} onChange={(e,nv) => handleTabChanged(nv)}>\n        {tabs.map(t => <Tab key={t.label} label={t.label}/>)}\n      </Tabs>\n      {tabs.map((t,i) => <TabPanel key={t.label} value={tabValue} index={i}>{t.children}</TabPanel>)}\n    </React.Fragment>\n  )\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n       <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          XWordMaker\n        </Typography>\n        <Button\n          aria-label=\"Save puzzle\"\n          color=\"inherit\"\n          startIcon={<SaveAlt />}\n          onClick={handleSavePuzzle}\n        >\n          Save Puzzle\n        </Button>\n        <Button\n          aria-label=\"Load puzzle\"\n          color=\"inherit\"\n          component=\"label\"\n          startIcon={<ArrowUpwardIcon />}\n        >\n          Load Puzzle\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            onChange={handleImportPuzzle}\n            />\n        </Button>\n        <NewPuzzleForm onSave={handleCreateNewPuzzle}/>\n       </Toolbar>\n      </AppBar>\n      <Container className={classes.container}>\n        <Grid container spacing={2}>\n        { separateGrid && (\n          <Grid item lg={6} >\n            {gridComponent}\n          </Grid>\n        )}\n          <Grid item lg={6}>\n            {renderedTabs}\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}